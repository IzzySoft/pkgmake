#!/bin/bash
###############################################################################
# Debian Paket Builder
# A wrapper to debbuild
#------------------------------------------------------------------------------
# This script is intended to fill a little gap in debbuild, which does not
# interpret the %dir tag. As a side-effect, it eases package creation for
# programmers who don't want to care about packaging too much - but still
# want to provide packages for their users. Thus, it automats package creation.
#
# Requirements are the same as for debbuild, which the script finally calls.
# Of course, you may modify the settings at the top of the script to call
# rpmbuild instead - so you can use it to build RPMs as well (just modify
# BUILDDEB to point to "/usr/src/rpm" (or "/usr/share/redhat, whatever the
# location is with your distribution), plus DEBBUILD to point to "rpmbuild",
# and you are done.
#
# To use the script finally, you need to set up a template SPEC file. In there,
# you *can* use 2 placeholders which are filled by this script:
# __VERSION__ will be replaced with the release (cmdline option "-r")
# __DIR__     will be replaced with the complete filelist of your distribution
# Setup the distribution directory (i.e. make a copy, clean up all CVS/SVN
# files, re-arrange files if necessary - e.g. the %doc files need to be
# under usr/share/doc/), and run the script. The result will be:
# - a tarball in $BUILDDEB/SOURCES
# - a source package in $BUILDDEB/SDEBS (or $BUILDDEB/SRPMS)
# - a binary package in the directory for the corresponding architecure
###############################################################################
# $Id$

#===============================================[ Setup Script environment ]===
#---------------------------------------------------------------[ Settings ]---
BUILDDEB="/usr/src/debian"       	# Where the packages are located
DEBBUILD="debbuild"			# debbuild executable
RPMBUILD="rpmbuild"			# rpmbuild executable
# Some defaults:
VENDOR="root <root@`hostname`>" 	# Who wrote it
VENDORURL=""		  		# Default vendor URL (Escape slashes!)
PACKAGER="root <root@`hostname`>" 	# Who made the package
BUILDARCH="noarch"                      # Target Architecture (noarch,i386,...)
LICENSE="GPL"                           # License of the program
RELEASE="1"                        	# Release of this version
GROUP="Applications\/Internet"         	# RPM group this goes to
SECTION=""              	        # Debian section this goes to
SPECONLY=0                              # we not only create the spec by default
MKTAR=1                                 # Create tarball from source
NUKECVS=1                               # Cleanup CVS/* and .svn/* from source?
MKDEB=1					# Make Debian package (*.deb)?
MKRPM=0					# Make RPM package (*.rpm)?
MKSDEB=0				# Make Debian source package (*.sdeb)?
MKSRPM=0				# Make RPM source package (*.src.rpm)?
#DEBOPTS="--define 'DEBIAN 1'"           # Options for debbuild
DEBOPTS=""
#RPMOPTS=\-\-define\ \'REDHAT 1\'           # Options for rpmbuild
RMDSPEC=1                               # Remove .dspec after processing

# Don't change anything below this line except you know what you're doing
BINDIR=${0%/*}				# where this script resides
PREFIX="/"				# absolute path needed for *.deb
TMPFILE="/tmp/flist.$$"			# we need some tempfile
QUIET=0                                 # Shall we shutup ourself?
PKGMV=0.1.4                             # Version of this script

#-----------------------------------------------------------------[ Colors ]---
red='\e[0;31m'
blue='\e[0;34m'
blink='\E[5m'
NC='\e[0m'              # No Color

#-----------------------------------------------------------[ Display help ]---
function help {
  SCRIPT=${0##*/}
  clear
  echo
  echo -e "${blue}==============================================================================="
  echo "Package Builder v${PKGMV}          (c) 2007 by Itzchak Rehberg (devel@izzysoft.de)"
  echo -e "-------------------------------------------------------------------------------$NC"
  echo "This script is a wrapper to debbuild  (which is a wrapper to the Debian package"
  echo "building binaries)  and  rpmbuild.   It shall  simplify  the build process  for"
  echo "developers by automatizing mosts steps."
  echo "Distributed under the terms of the GPL. No warranties - use at your own risk!"
  echo -e "${blue}-------------------------------------------------------------------------------$NC"
  echo "Syntax: ${SCRIPT} <PackageName> <Version> [Options]"
  echo "  Parameter:"
  echo "     <PackageName>              Name of the package"
  echo "     <Version>                  Version of this release"
  echo "  Options (overwrite defaults):"
  echo "     -a <author/vendor>         Vendor for this package (default: ${VENDOR})"
  echo "     -b <build architecture>    Target architecture (default: ${BUILDARCH})"
  echo "     -c <changelog file>        Filename of changelog file"
  echo "     -conf <conffiles>          Space separated list of files to thread as %config"
  echo "     -d <directory root>        Where to take the files from"
  echo "     -deb			Make *.deb even if MKDEB=0"
  echo "     -descfile <file>           Filename of the file holding the long desc"
  echo "     -g <group>                 Group for this package (escape slashes!)"
  echo "     -keepdspec                 Don't remove the .dspec file after processing"
  echo "     -l <license>               License of the program (default: ${LICENSE})"
  echo "     -nodeb			Don't make *.deb even if MKDEB=1"
  echo "     -nonukecvs                 Don't cleanup CVS/* and .svn/* files from source"
  echo "     -norpm			Don't make *.rpm even if MKRPM=1"
  echo "     -nosdeb			Don't make Debian source package"
  echo "     -nosrpm			Don't make RPM source package"
  echo "     -notar                     Don't create the tarball (i.e. it's already there)"
  echo "     -p <packager>              Packager for this package (default: ${PACKAGER})"
  echo "     -prov <provides>           Space separated list of provides"
  echo "     -r <release>               Release of this version (default: ${RELEASE})"
  echo "     -req <requires>            Space separated list of required packages"
  echo "     -rpm			Make *.rpm even if MKRPM=0"
  echo "     -q	                        Be Quiet (subprocesses)"
  echo "     -Q	                        Be Quiet (ourself)"
  echo "     -s <summary>               Short description (put in quotes!)"
  echo "     -sdeb			Make Debian source package (*.sdeb)"
  echo "     -section <section>         Make separate *.dspec file with given section"
  echo "     -speconly                  Only create the SPEC file and exit, no build"
  echo "     -srpm			Make RPM source package (*.src.rpm)"
  echo "     -t <TemplateFile>          Template file (default: <PackageName>.tpl)"
  echo "     -u <vendor URL>            Vendor URL for this package (default: ${VENDORURL})"
  echo
  echo " The SPEC template file must reside in the ${BUILDDEB}/SPEC directory."
  echo
  echo "See 'man pkgmake' for more information."
  echo -e "${blue}===============================================================================$NC"
  echo
  exit
}

#-----------------------------------------------[ Show progress (or don't) ]---
function say {
  [ $QUIET -eq 0 ] && echo -e "$1"
}

#------------------[ Read one char user input and convert it to lower case ]---
function yesno {
  read -n 1 -p "" ready
  echo
  res=`echo $ready|tr [:upper:] [:lower:]`
}

function stayorgo {
  [ "$res" != "y" ] && {
    echo "* Process canceled."
    exit 0
  }
  echo
}

#---------------------------------------------------[ Output script header ]---
function header {
  [ $QUIET -eq 0 ] && clear
  say "${blue}pkgmake v${PKGMV}"
  say "--------------"
  say
  say "Preparing ${PROG} v${VERSION} for release:${NC}"
}

#-------------------------------------------------------------[ ErrorExits ]---
function nospec {
  header
  echo -e "${red}SPEC file template (${SPECTPL}) not found, aborting.$NC"
  exit 2
}

function nosrc {
  header
  echo -e "${red}Sources of $PROG v$VERSION (${SRCDIR}/*) not found, aborting.$NC"
  exit 2
}

function notar {
  header
  echo -e "${red}Tarball for $PROG v$VERSION (${BUILDDEB}/SOURCES/${PROG}-${VERSION}.tar.gz) not found, aborting.$NC"
  exit 2
}

function finito {
  say "${blue}* Done.$NC"
  say
  exit
}

#--------------------------[ Output a file entry to the debbuild file list ]---
function list {
  echo ${PREFIX}$1 >>$TMPFILE
}

#--------------[ Walk the source and create include file list for debbuild ]---
function walkdir {
  local DIR=$1
  if [ -d $DIR ]; then
    for entry in ${DIR}/*; do
      walkdir "${entry}"
    done
  elif [ -f $DIR ]; then
    list "${entry}"
  elif [ -h $DIR ]; then
    list "${entry}"
  fi
}

#=============================================================[ Do the job ]===
#----------------------------------------------[ Read config file (if any) ]---
if [ -f ~/.pkgmakerc ]; then
  . ~/.pkgmakerc
elif [ -f /etc/pkgmake.conf ]; then
  . /etc/pkgmake.conf
fi

#-------------------------------------------[ process command line options ]---
typeset -i SILENT=0
typeset -i SILENTc=0
PROG=$1
VERSION=$2
while [ "$1" != "" ] ; do
  case "$1" in
    -a) shift; VENDOR=$1;;
    -b) shift; BUILDARCH=$1;;
    -c) shift; CHANGELOG=$1;;
    -conf) shift; CONF=$1;;
    -d) shift; SRCDIR=$1;;
    -deb) MKDEB=1;;
    -debopt) shift; DEBOPTS=$1;;
    -descfile) shift; DESCFILE=$1;;
    -g) shift; GROUP=$1;;
    -l) shift; LICENSE=$1;;
    -keepdspec) RMDSPEC=0;;
    -nodeb) MKDEB=0;;
    -nonukecvs) NUKECVS=0;;
    -norpm) MKRPM=0;;
    -nosdeb) MKSDEB=0;;
    -nosrpm) MKSRPM=0;;
    -notar) MKTAR=0;;
    -p) shift; PACKAGER=$1;;
    -prov) shift; PROV=$1;;
    -q) [ $SILENTc -lt 2 ] && let SILENTc=$SILENT+1;;
    -Q) QUIET=1;;
    -r) shift; RELEASE=$1;;
    -req) shift; REQ=$1;;
    -rpm) MKRPM=1;;
    -rpmopt) shift; RPMOPTS=$1;;
    -s) shift; SUMMARY=$1;;
    -sdeb) MKSDEB=1;;
    -section) shift; SECTION=$1;;
    -speconly) SPECONLY=1;;
    -srpm) MKSRPM=1;;
    -t) shift; SPECTPL="${BUILDDEB}/SPECS/$1";;
    -u) shift; VENDORURL=$1;;
  esac
  shift
done
[ $SILENTc -gt 0 ] && SILENT=$SILENTc

[ -z "$PROG" ] && help
[ -z "$VERSION" ] && help

#----------------------------------------------------[ check preconditions ]---
# SPEC file
[ -z "$SPECTPL" ] && SPECTPL="${BUILDDEB}/SPECS/${PROG}.tpl"
[ -f "${SPECTPL}" ] || nospec
# Sources
if [ $MKTAR -gt 0 ]; then
  if [ -z "$SRCDIR" ]; then
    SRCDIR="${BUILDDEB}/BUILD/${PROG}-${VERSION}"
    [ -d "$SRCDIR" ] || nosrc
  else
    [ -d "$SRCDIR" ] || nosrc
    rm -rf ${BUILDDEB}/BUILD/${PROG}-${VERSION}
    cp -rp $SRCDIR ${BUILDDEB}/BUILD/${PROG}-${VERSION}
    SRCDIR="${BUILDDEB}/BUILD/${PROG}-${VERSION}"
  fi
  [ $NUKECVS -gt 0 ] && {
    cd $SRCDIR
    find . -type d -name "CVS" | xargs rm -fR
    find . -type d -name ".svn" | xargs rm -fR
    rc=`cd -`
  }
else
  [ -f ${BUILDDEB}/SOURCES/${PROG}-${VERSION}.tar.gz ] || notar
  rm -rf ${BUILDDEB}/BUILD/${PROG}-${VERSION}
  cd ${BUILDDEB}/BUILD
  tar xzf ${BUILDDEB}/SOURCES/${PROG}-${VERSION}.tar.gz
  cd -
  [ $NUKECVS -gt 0 ] && {
    cd ${BUILDDEB}/BUILD/${PROG}-${VERSION}
    find . -type d -name "CVS" | xargs rm -fR
    find . -type d -name ".svn" | xargs rm -fR
    cd -
  }
fi

#-----------------------------------------------------------[ print header ]---
header

#----------------------------------------------------[ preparing SPEC file ]---
say "${blue}* Preparing SPEC file$NC"
SPECFILE=${BUILDDEB}/SPECS/${PROG}-${VERSION}.spec
DSPECFILE=${BUILDDEB}/SPECS/${PROG}-${VERSION}.dspec
cd "${BUILDDEB}/BUILD/${PROG}-${VERSION}"
# Setup filelist
for i in *; do
  walkdir "$i"
done
# Requirements
[ -n "$REQ" ] && {
  typeset -i c=0
  for r in $REQ; do
    [ $c -gt 0 ] && REQUIRES="${REQUIRES}\n";
    REQUIRES="${REQUIRES}Requires: $r"
    let c=$c+1
  done
}
# Provides
[ -n "$PROV" ] && {
  typeset -i c=0
  for r in $PROV; do
    [ $c -gt 0 ] && PROVIDES="${PROVIDES}\n";
    PROVIDES="${PROVIDES}Provides: $r"
    let c=$c+1
  done
}
# ConfFiles
[ -n "$CONF" ] && {
  typeset -i c=0
  for r in $CONF; do
    [ $c -gt 0 ] && CONFIG="${CONFIG}\n";
    CONFIG="${CONFIG}%config $r"
    let c=$c+1
  done
}
# Search and Replace the template vars
cat $SPECTPL | sed "s/__RELEASE__/${RELEASE}/g" | sed "s/__NAME__/${PROG}/g" \
 | sed "s/__VENDOR__/${VENDOR}/g" | sed "s/__PACKAGER__/${PACKAGER}/g" \
 | sed "s/__BUILDARCH__/${BUILDARCH}/g" | sed "s/__CONFIG__/${CONFIG}/g" \
 | sed "s/__SUMMARY__/${SUMMARY}/g" \
 | sed "s/__LICENSE__/${LICENSE}/g" | sed "s/__VERSION__/${VERSION}/g" \
 | sed "/__DIR__/ r ${TMPFILE}" | sed "/__DIR__/ d" > $SPECFILE
if [ -f "${DESCFILE}" ]; then
  cat $SPECFILE | sed "/__DESCRIPTION__/ r ${DESCFILE}" | sed "/__DESCRIPTION__/ d" > $TMPFILE
else
  cat $SPECFILE | sed "s/__DESCRIPTION__/${SUMMARY}/g" > $TMPFILE
fi
# The Vendor URL:
if [ -n "$VENDORURL" ]; then
  VENDORURL="URL: ${VENDORURL}"
  cat $TMPFILE | sed "s/__VENDORURL__/${VENDORURL}/g" > $SPECFILE
else
  cat $TMPFILE | sed "/__VENDORURL__/ d" > $SPECFILE
fi
# Manual Requires:
if [ -n "${REQUIRES}" ]; then
  cat $SPECFILE | sed "s/__REQUIRES__/${REQUIRES}/g" > $TMPFILE
else
  cat $SPECFILE | sed "/__REQUIRES__/ d" > $TMPFILE
fi
# Manual Provides:
if [ -n "${PROVIDES}" ]; then
  cat $TMPFILE | sed "s/__PROVIDES__/${PROVIDES}/g" > $SPECFILE
else
  cat $TMPFILE | sed "/__PROVIDES__/ d" > $SPECFILE
fi
mv $SPECFILE $TMPFILE
# Debian section?
[ -n "$SECTION" ] && {
  cat $TMPFILE | sed "s/__GROUP__/${SECTION}/g" >$DSPECFILE
}
# RPM group
cat $TMPFILE | sed "s/__GROUP__/${GROUP}/g" >$SPECFILE
# ChangeLog:
if [ -n "$PKGMAKE_USED" ]; then
  PKGMAKE_USED="using pkgmake v${PKGMV} & ${PKGMAKE_USED}"
else
  PKGMAKE_USED="using pkgmake v${PKGMV}"
fi
echo "* `LANG=en_EN date +"%a %b %d %Y"` ${PACKAGER}"> $TMPFILE
echo "- packaged ${PROG}_${VERSION}-${RELEASE} ${PKGMAKE_USED}" >>$TMPFILE
[ -n "${CHANGELOG}" ] && [ -f "${CHANGELOG}" ] && cat ${CHANGELOG} >> $TMPFILE
cat $TMPFILE >> $SPECFILE
[ -n "$SECTION" ] && {
  cat $TMPFILE >>$DSPECFILE
}

rm -f $TMPFILE

[ $SPECONLY -eq 1 ] && finito

#---------------------------------------------------------[ create tarball ]---
if [ $MKTAR -gt 0 ]; then
  say "${blue}* Creating tarball$NC"
  cd "${BUILDDEB}/BUILD/"
  tar czf ${BUILDDEB}/SOURCES/${PROG}-${VERSION}.tar.gz ${PROG}-${VERSION}/*
fi

#---------------------------------------------------[ building the package ]---
if [ $MKSDEB -eq 0 ]; then DEBPARM="-bb"; else DEBPARM="-ba"; fi
if [ $MKSRPM -eq 0 ]; then RPMPARM="-bb"; else RPMPARM="-ba"; fi
[ $MKDEB -gt 0 ] && {
  say "${blue}* Running ${DEBBUILD}$NC"
  [ -z "$SECTION" ] && DSPECFILE=$SPECFILE
  case "$SILENT" in
    1)   $DEBBUILD $DEBPARM $DEBOPTS $DSPECFILE >/dev/null ;;
    2|3) $DEBBUILD $DEBPARM $DEBOPTS $DSPECFILE &>/dev/null ;;
    *)   $DEBBUILD $DEBPARM $DEBOPTS $DSPECFILE ;;
  esac
}
[ $MKRPM -gt 0 ] && {
  [ $MKDEB -gt 0 ] && say
  say "${blue}* Running ${RPMBUILD}$NC"
  echo "$RPMBUILD $RPMOPTS $RPMPARM $SPECFILE"
  case "$SILENT" in
    1)   $RPMBUILD $RPMOPTS $RPMPARM $SPECFILE >/dev/null ;;
    2|3) $RPMBUILD $RPMOPTS $RPMPARM $SPECFILE &>/dev/null ;;
    *)   $RPMBUILD $RPMOPTS $RPMPARM $SPECFILE ;;
  esac
}
[ $RMDSPEC -gt 0 ] && [ -f $DSPECFILE ] && rm -f $DSPECFILE

finito
