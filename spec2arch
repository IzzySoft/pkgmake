#!/bin/bash
###############################################################################
# RPM SpecFile to ArchLinux PKGBUILD converter             (c) 2008 by IzzySoft
#------------------------------------------------------------------------------
# This script does a raw "convert" from a given .spec file to an ArchLinux
# PKGBUILD file. The resulting file still should be reviewed!
#------------------------------------------------------------------------------
# Syntax:
#    spec2arch <specfile> <outfile>
###############################################################################
# $Id$

#==========================================================[ Configuration ]===
# This is what will be put in front of the "source" lines content:
#SRC_BASEURL="http://projects.izzysoft.de/ftp/net/div/izzysoft/\$pkgname"
SRC_BASEURL=""

#===========================================================[ Syntax Check ]===
[ -z "$2" ] && {
  echo
  echo "Syntax:"
  echo "   spec2arch <specfile> <outfile>"
  echo
  echo "where <specfile> is the RPM .spec file to process, and <outfile> the"
  echo "resulting PKGBUILD file."
  echo
  exit 5
}
SPECFILE=$1
OUTFILE=$2

#--------------------------------------------[ Package unsupported for us? ]---
#excludeos
EXCLOS=$(cat "$SPECFILE"|tr [:upper:] [:lower:]|sed -n '/^excludeos.*linux/p')
[ -n "$EXCLOS" ] && {
  echo "Sorry - but this package seems not to be supported for ArchLinux:"
  echo "'$EXCLOS'"
  exit 22
}
#exclusiveos
EXCLUS=$(cat "$SPECFILE"|tr [:upper:] [:lower:]|sed -n '/^exclusiveos/p')
[ -n "$EXCLUS" ] && {
  EXCLUSLX=$(cat "$SPECFILE"|tr [:upper:] [:lower:]|sed -n '/^exclusiveos.*linux/p')
  [ -z "$EXCLUSLX" ] && {
    echo "Sorry - but this package seems not to be supported for ArchLinux:"
    echo "'$EXCLUS'"
    echo "'$EXCLUSLX'"
    exit 22
  }
}
#excludearch
#exclusivearch

#===========================================================[ Helper Funcs ]===
#-------------------------------[ Remove leading and trailing white spaces ]---
function trim() {
  echo "$1"|sed 's/^\s*//;s/\s*$//'
}

#------------------------------------------------[ Output PKGBUILD content ]---
function output() {
  if [ -n "$PACKAGER" ]; then
    echo "# Contributor: $PACKAGER"
  elif [ -n "$VENDOR" ]; then
    echo "# Contributor: $VENDOR"
  else
    echo "# Contributor: unknown"
  fi
  echo "# This PKGBUILD file was autogenerated and should be verified before use!"
  echo "pgkname=$PKGNAME"
  echo "pkgver=$PKGVER"
  echo "pkgrel=$PKGREL"
  echo "pkgdesc=\"$PKGDESC\""
  echo "arch=$ARCH"
  [ -n "$URL" ] && echo "url=\"$URL\""
  [ -n "$LICENSE" ] && echo "license=('$LICENSE')"
  echo "groups=('$GROUP')"
  [ -n "$DEPENDS" ] && {
    DEPENDS=$(echo "$DEPENDS"|sed 's/,/ /')
    echo "depends=($(trim "$DEPENDS"))"
  }
  [ -n "$PROVIDES" ] && {
    PROVIDES=$(echo "$PROVIDES"|sed 's/,/ /')
    echo "provides=($(trim "$PROVIDES")"
  }
  [ -n "$CONFLICTS" ] && {
    CONFLICTS=$(echo "$CONFLICTS"|sed 's/,/ /')
    echo "conflicts=($(trim "$CONFLICTS"))"
  }
  [ -n "$REPLACES" ] && {
    REPLACES=$(echo "$REPLACES"|sed 's/,/ /')
    echo "replaces=($(trim "$REPLACES"))"
  }
  [ -n "$BACKUP" ] && echo "backup=($(trim "$BACKUP"))"
  echo "source=($SRC_BASEURL/\$pkgname-\$pkgver.tar.gz)"
  echo
  echo -e "build() {$BUILD"
  echo "}"
  echo "# vim: set ts=2 sw=2 et:"
}

#=======================================================[ Parse Input File ]===
DEPENDS=""
PROVIDES=""
CONFLICTS=""
REPLACES=""
BACKUP=""
BUILD=""
LICENSE=""
BUILDBLOCK=0
while read line; do
  [ $BUILDBLOCK -eq 1 ] && {
    if [ "${line:0:1}" == "%" ]; then
      VAR=`echo $line|awk '{print $1}'|tr [:upper:] [:lower:]`
      case "$VAR" in
        "%prep"|"%setup"|"%build"|"%install"|"%pre"|"%clean"|"%post") continue;;
	*) BUILDBLOCK=0; continue;;
      esac
    else
      VAL=`trim "$line"`
      [ -z "$VAL" -o  "${VAL:0:1}" = "#" ] && continue
      BUILD="${BUILD}\n  $line"
      continue
    fi
  }
  if [ "${line:0:1}" == "%" ]; then
    VAR=`echo $line|awk '{print $1}'|tr [:upper:] [:lower:]`
    case "$VAR" in
      "%prep"|"%setup"|"%build"|"%install"|"%pre"|"%clean"|"%post") BUILDBLOCK=1; continue;;
      *) continue;;
    esac
  fi
  pat=`echo "$line"|egrep -i "^\w+:"`
  [ -n "$pat" ] && {
    VAR=`echo "$line"|awk -F: '{print $1}'`
    VARL=`echo "$VAR"|tr [:upper:] [:lower:]`
    VLEN=${#VAR}
    VAL=`trim "${line:$VLEN+1}"`
    case "$VARL" in
      "summary") PKGDESC="$VAL";;
      "version") PKGVER=$VAL;;
      "name") PKGNAME=$VAL;;
      "release") PKGREL=$VAL;;
      "license") LICENSE="$VAL";;
      #"group") GROUP="$VAL";; # Arch's group tag is not used in the same way. Arch groups are similar in concept to metapackages.
      # "source") SOURCE="${SRC_BASEURL}/$VAL";;
      "vendor") VENDOR="$VAL";;
      "packager") PACKAGER="$VAL";;
      "url") URL="$VAL";;
      "buildarchitectures"|"buildarch")
        if [ "$VAL" = "noarch" ]; then
	  ARCH="('any')"
	else
	  ARCH="('$VAL')"
       fi
	;;
      "requires"|"buildrequires") DEPENDS="${DEPENDS} '$VAL'";; # Should we have logic here to check for versioned requirements?
      "provides") PROVIDES="${PROVIDES} '$VAL'";;
      "conflicts") CONFLICTS="${CONFLICTS} '$VAL'";;
      "replaces") REPLACES="${REPLACES} '$VAL'";;
      "copyright") LICENSE="${LICENSE} '$VAL'";;
    esac
    continue
  }
  pat=`echo "$line"|egrep -i "^%config"`
  [ -n "$pat" ] && {
    VAR=`echo "$line"|awk '{print $1}'`
    VLEN=${#VAR}
    VAL=`trim "${line:$VLEN+1}"`
    BACKUP="${BACKUP} '$VAL'"
    continue
  }
done<$SPECFILE

output >$OUTFILE

#------------------------------------------------------------------[ Done. ]---
