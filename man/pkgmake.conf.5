.TH "PKGMAKE.CONF" "5" "30 July 2007"
.SH "NAME" 
pkgmake.conf \- Configuration file for \fBpkgmake\fR, which creates RPM spec
files and builds *.rpm/*.deb packages
.SH "DESCRIPTION" 
.PP 
This manual page documents the options that can be set in the pkgmake.conf
configuration file. For a description of what pkgmake does, see the pkgmake(8)
manpage.

.SH "SETTINGS" 
.PP 
The syntax of options is OPTION=value - Bash syntax, since it will be sourced
by the pkgmake executable, which is written in Bash script.

.PP
The following settings are available in pkgmake.conf: 

.IP "\fBBUILDDEB\fP" 10
Set this to the top directory of your build environment. For RPM, this is
usually /usr/src/rpm (or /usr/src/redhat on RedHat/CentOS). For the use of
debbuild, create a symlink /usr/src/debian pointing to /usr/src/rpm, or make
a copy of /usr/src/rpm as /usr/src/debian - debbuild is looking at that
location. Optionally enclose the directory name in quotes for the sake of
spaces in it.

.IP "\fBDEBBUILD\fP" 10 
Name of the debbuild executable, optionally with path. To build *.rpm files,
this would be "rpmbuild".

.IP "\fBVENDOR\fP" 10 
This is usually the author of the software. Use the syntax "John Doe <john@doe.com>",
i.e. "Name <email@address>" for this field - or rpmbuild will break.

.IP "\fBVENDORURL\fP" 10
The website of the author. Make sure to "escape" all slashes here, since the
string is used in a regular expression as-is. Example: "http:\\/\\/domain.com\\/"
 
.IP "\fBPACKAGER\fP" 10 
Who made the package. See VENDOR for syntax.

.IP "\fBBUILDARCH\fP" 10 
Target build architecture, e.g. i386, athlon, noarch

.IP "\fBLICENSE\fP" 10 
License of this software. Usually GPL
 
.IP "\fBRELEASE\fP" 10 
An optional release suffix. Shouldn't be a too long string.
 
.IP "\fBGROUP\fP" 10 
Software group for e.g. the menu (example: \fIApplications\\/Internet\fR).
Again, escape all forward slashes.

.IP "\fBSECTION\fP" 10
Usually, .spec files are generated for rpmbuild - and thus should apply to the
RPM specifications. RPM classifies software by groups, which are unfortunately
not the same as the sections used by Debian. If your Software e.g. belongs to
the group "Development/Tools", the corresponding section for Debian most likely
would be "devel" - while "Applications/Databases" has no corresponding section
and probably goes to "misc".

It is obvious that these sections would cause problems when bound into a RPM
package, even if rpmbuild will build it. So this leaves us with two choices:
Either break RPM - or have a separate spec file for debbuild. If you are
\fBnot\fR going to build any RPM packages, you can stay with the \fBGROUP\fR
keyword (see above) instead. If you are building RPM packages only - this
question doesn't come up. But if you want to build \fBboth\fR RPM and DEB at
the same time, this is for you: The \fBSECTION\fR keyword (or \fB-section\fR
switch at the command line) tells pkgmake to build a separate .dspec file
with the given section and hands this to debbuild, while rpmbuild will be given
the correct .spec file.

.IP "\fBSPECONLY\fP" 10
If set to "1", pkgmake will only create the .spec file and exit (see also
the -speconly command line parameter). Use this if you first want to check
the .spec file before entering the build process - e.g. when testing.

.IP "\fBMKTAR\fP" 10
Whether a source tarball (<program>-<version>.tar.gz) shall be created in
the SOURCES/ directory (MKTAR=1) or not (MKTAR=0). Use the -notar command
line switch to override (if your configuration says "MKTAR=1" and you
don't want this for this run). If specified, the -d switch will be ignored.

.IP "\fBNUKECVS\fP" 10
Shall we remove all CVS/* and .svn/* directories/files from the copy of the
sources? Usually, you will set this to "1" since you don't want to have them
in your distribution tarball. See also the -nonukecvs command line parameter.

.IP "\fBMKDEB\fP" 10
Do you want to create Debian packages (*.deb) by default? You can override
this on the command line with the -deb or -nodeb parameters.

.IP "\fBMKRPM\fP" 10
Do you want to create RPM packages (*.rpm) by default? You can override
this on the command line with the -rpm or -norpm parameters.

.IP "\fBMKSDEB\fP" 10
Create Debian sourcce package (*.sdeb) by default?. Since these source packages
only make sense to people using debbuild, they should normally not be build.
The only reason could be for you to store the source tarball together with the
Spec file in one archive.

.IP "\fBMKSRPM\fP" 10
Create RPM source package (*.src.rpm) by default?

.IP "\fBDEBOPTS\fP" 10
Define additional command line options to pass to debbuild. Quote special
characters, e.g. \fBDEBOPTS="--define 'REDHAT 1'"\fR.

.IP "\fBRPMOPTS\fP" 10
Define additional command line options to pass to rpmbuild. This is useful e.g.
if your .spec file contains code which must be handled differently for Debian
and RPM systems. For this, you could enclose the corresponding part e.g. with
"%if %{REDHAT} (RPM code here) %else (DEB code here) %endif", and pass the
parameter "--define 'REDHAT 1'" to rpmbuild (and nothing special to debbuild,
which then would go to the %else condition). See \fBDEBOPTS\fR above.

.IP "\fBRMDSPEC\fR" 10
Shall we remove the .dspec file (if created) after processing (1) or not (0)?
See \fBSECTION\fR above for details on the .dspec file.

.IP "\fBRMSPEC\fR" 10
Shall we remove the .spec file after processing (1) or not (0)? After the
processing you normally don't need it any longer, since a) you can recreate it
any time from the template, and b) it is stored in the .src.rpm (if you create
one).

.IP "\fBCHANGELOGSORT\fR" 10
Whether pkgmake should take care that the changelog has its entries in the
right order (1) or not (0). The order is important for rpmbuild (which will
break otherwise). However, debbuild doesn't care (yet?).

.SH "SEE ALSO" 
.PP 
pkgmake(8)

pkgmake.tpl(5)
.SH "AUTHOR" 
.PP 
This manual page was written by Andreas Itzchak Rehberg (devel@izzysoft.de),
the author of the program. Permission is granted to copy, distribute and/or
modify this document under the terms of the GNU General Public License,
Version 2.

More information may be found on the authors website, http://www.izzysoft.de/
 
