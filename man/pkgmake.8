.TH pkgmake 8 "26 July 2007"
.IX pkgmake
.SH NAME
pkgmake - create RPM spec files and build *.rpm/*.deb packages
.SH SYNOPSIS
.B pkgmake
.RB < "\fIPackageName\fR" >
.RB < "\fIVersion\fR" >
.RB [ "-a \fIauthor\fR" ]
.RB [ "-b \fIbuild-architecture\fR" ]
.RB [ "-c \fIchangelog-file\fR" ]
.RB [ "-conf \fI'conf files'\fR" ]
.RB [ "-d \fIdirectory-root\fR" ]
.RB [ "-deb" ]
.RB [ "-debopt '\fIoption\fR [ option ...]' " ]
.RB [ "-descfile \fIdescription-file\fR" ]
.RB [ "-g \fIgroup\fR" ]
.RB [ "-l \fIlicense\fR" ]
.RB [ "-nosdeb" ]
.RB [ "-nosrpm" ]
.RB [ "-notar" ]
.RB [ "-nonukecvs" ]
.RB [ "-p \fIpackager\fR" ]
.RB [ "-prov \fI'provides what'\fR" ]
.RB [ "-r \fIrelease\fR" ]
.RB [ "-req \fI'requires what'\fR" ]
.RB [ "-rpm" ]
.RB [ "-rpmopt '\fIoption\fR [ option ...]' " ]
.RB [ "-q" ]
.RB [ "-Q" ]
.RB [ "-s \fI'short summary'\fR" ]
.RB [ "-sdeb" ]
.RB [ "-speconly" ]
.RB [ "-srpm" ]
.RB [ "-t \fItemplate-file\fR" ]
.RB [ "-u \fIvendor-URL\fR" ]

.SH DESCRIPTION
pkgmake is just a simple shell script to create RPM *.spec files and per
default (which is optionally) calls the packager rpmbuild/debbuild to create
the package. For not-too-complex packages, a single spec template can serve
for all packages to build, since most information (as e.g. packager, target
architecture) do not change (and thus are hold as default values in the
configuration) - while others (like package name and version) can be passed
to the script on the command line.

Its target is to be simple to use, and save the developer from the need to
study all the details and specifications concerning the package management
with RPM and Debian. Instead, in most cases you will be able to build the RPM
and the DEB package with the same SPEC file and configuration.

.SH OPTIONS
.TP
.B PackageName
Name of the package to build. This will be used in the spec file for the name
tag as well as to derive the appropriate file names.
.TP
.B Version
The version of the release you are going to build.
.TP
.B -a
Used to override the default author of the software you are going to package.
The default author is configured inside the pkgmake shell script itself and
may be modified there as well. The syntax to use is:
\fBname <email@address>\fR
.TP
.B -b
Target BuildArchitecture. Something like \fBi386\fR, \fBathlon\fR, or \fBnoarch\fR.
.TP
.B -c
A file holding the changelog of the software. The content must conform to the
RPM specifications, i.e. the latest entry must be on top (and the oldest at the
end) of the file. For the line syntax, refer to the sample entry generated by
this script.
.TP
.B -conf
A space separated list of files from the package which should be treated as
configuration files (i.e. don't overwrite on install but create a copy, don't
remove on deletion except if --purge is specified). You must enclose this list
with single quotes, and escape all forward slashes (i.e. "/") by a backslash
(i.e. "\\").
An example: \fB-conf '\\/some\\/file \\/another\\/file'\fR
.TP
.B -d
Directory to use for a work copy. If used, this directory (and all its content)
will be copied to the Buildroot and handled there. If not used, the files to use
are expected in the Buildroot as a sub directory with the name <PackageName>-<Version>
.TP
.B -deb
Make *.deb (even if config says MKDEB=0)
.TP
.B -debopt
Option(s) to pass to debbuild.
.TP
.B -descfile
A file holding the long description for the package. If not given, the summary will
be used instead.
.TP
.B -g
The software group your package belongs to. An examples would be
\fB"Applications\\/Graphic"\fR. Again, escape all forward slashes with a
backslash.
.TP
.B -l
License of the software. Should be GPL :)
.TP
.B -nodeb
Don't make *.deb (even if config says MKDEB=1)
.TP
.B -nonukecvs
Don't nuke the CVS/* and .svn/* files from the source (copy). Not very useful -
but hey, you never know who wants to distribute the CVS/SVN information along!
.TP
.B -norpm
Don't make *.rpm (even if config says MKRPM=1)
.TP
.B -nosdeb
Don't create Debian sourcce package (*.sdeb). Since these source packages only
make sense to people using debbuild, they should normally \fInot\fR be build. The only
reason could be for you to store the source tarball together with the Spec file
in one archive.
.TP
.B -nosrpm
Don't create RPM source package (*.src.rpm)
.TP
.B -notar
Don't create tarball from the sources. This means, that the source tarball
already exists in the SOURCES/ directory with the correct naming conventions.
Even if you specify a directory with -d, that will be ignored in this case.
.TP
.B -p
The packager - you, if you build the package. Same rules as with \fB-a\fR
.TP
.B -prov
What the package provides. This could be either the names of the main executables,
or the meta-name (e.g. httpd if you build Apache) used for the "requires" of
other packages.
.TP
.B -r
The release tag for this package.
.TP
.B -req
What other packages this package depends on. Same rules as with \fB-prov\fR
.TP
.B -rpm
Make *.rpm (even if config says MKRPM=0)
.TP
.B -rpmopt
Option(s) to pass to rpmbuild. Enclose the options in quotes, e.g. \fB-rpmopt "--clean"\fR.
See the \fBRPMOPTS\fR configuration option in \fIman pkgmake.conf\fR for more
details.
.TP
.B -q
Tell the sub-processes to be quiet. You can use this option up to 2 times on
one call (starting from the 3rd time, it will simply be ignored): One -q
suppresses the load of STDOUT from the build process. The second -q
additionally suppresses its still talkative STDERR.
.TP
.B -Q
Be Quiet ourselves: Don't issue any output on STDOUT ourselves (doesn't apply
to the sub-processes - see \fB-q\fR for them).
.TP
.B -s
Give a short summary what your package is about. Enclose in quotes, escape all
forward slashes with backslashes again.
.TP
.B -sdeb
Create Debian source package. See \fB-nosdeb\fR above for details.
.TP
.B -speconly
Only create the *.spec file - don't run the package build process.
.TP
.B -srpm
Create RPM source package (*.src.rpm)
.TP
.B -t
Template file to use for the *.spec file. This file must be in the SPEC/
directory of your Build environment. If your directory tree is already arranged
the same way as the installation would be, you can use the alldirs.tpl (so all
files and directories will be included as-is). But if your software uses the
classical configure, make, make install - you should rather use the make.tpl
as a template, copy it to <package>.tpl and edit the file list manually
(examples are given inside make.tpl - or read the rpmbuild howtos for more
details).
.TP
.B -u
Specify a vendor URL. Again, forward slashes have to be escaped with
backslashes, e.g. \fB-u "http:\\/\\/www.domain.com\\/"\fR

.SH "CONFIGURATION"
Configuration can be done in either ~/.pkgmakerc, /etc/pkgmake.conf or the
head of the pkgmake executable - which is also the order of preference: pkgmake
first takes the configuration inside the script itself, and then looks for
~/.pkgmakerc - if found, this is used. If it is not found, it looks for the
/etc/pkgmake.conf and uses this file (if found) to overwrite the default
settings.

.SH "FILES"
/usr/bin/pkgmake

/etc/pkgmake.conf

~/.pkgmakerc

/usr/src/rpm/SPEC/alldirs.tpl

/usr/src/rpm/SPEC/make.tpl

.SH "SEE ALSO"
pkgmake.conf(5)

pkgmake.tpl(5)

.SH "AUTHOR" 
.PP 
This manual page was written by Andreas Itzchak Rehberg (devel@izzysoft.de),
the author of the program. Permission is granted to copy, distribute and/or
modify this document under the terms of the GNU General Public License,
Version 2.

More information may be found on the authors website, http://www.izzysoft.de/
 
