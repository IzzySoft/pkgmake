.TH pkgmake 8 "30 July 2007"
.IX pkgmake
.SH NAME
pkgmake - create RPM spec files and build *.rpm/*.deb packages

.SH SYNOPSIS
.B pkgmake
.RB < "\fIPackageName\fR" >
.RB < "\fIVersion\fR" >
.RB [ "-a \fIauthor\fR" ]
.RB [ "-b \fIbuild-architecture\fR" ]
.RB [ "-c \fIchangelog-file\fR" ]
.RB [ "-conf \fI'conf files'\fR" ]
.RB [ "-d \fIdirectory-root\fR" ]
.RB [ "-deb" ]
.RB [ "-debopt '\fIoption\fR [ option ...]' " ]
.RB [ "-descfile \fIdescription-file\fR" ]
.RB [ "-g \fIgroup\fR" ]
.RB [ "-l \fIlicense\fR" ]
.RB [ "-keepdspec" ]
.RB [ "-nochangelogsort" ]
.RB [ "-nosdeb" ]
.RB [ "-nosrpm" ]
.RB [ "-notar" ]
.RB [ "-nonukecvs" ]
.RB [ "-p \fIpackager\fR" ]
.RB [ "-prov \fI'provides what'\fR" ]
.RB [ "-r \fIrelease\fR" ]
.RB [ "-req \fI'requires what'\fR" ]
.RB [ "-rpm" ]
.RB [ "-rpmopt '\fIoption\fR [ option ...]' " ]
.RB [ "-q" ]
.RB [ "-Q" ]
.RB [ "-s \fI'short summary'\fR" ]
.RB [ "-sdeb" ]
.RB [ "-section \fI'section'\fR" ]
.RB [ "-speconly" ]
.RB [ "-srpm" ]
.RB [ "-t \fItemplate-file\fR" ]
.RB [ "-u \fIvendor-URL\fR" ]

.SH DESCRIPTION
pkgmake is just a simple shell script to create RPM *.spec files and per
default (which is optionally) calls the packager rpmbuild/debbuild to create
the package. For not-too-complex packages, a single spec template can serve
for all packages to build, since most information (as e.g. packager, target
architecture) do not change (and thus are hold as default values in the
configuration) - while others (like package name and version) can be passed
to the script on the command line.

Its target is to be simple to use, and save the developer from the need to
study all the details and specifications concerning the package management
with RPM and Debian. Instead, in most cases you will be able to build the RPM
and the DEB package with the same SPEC file and configuration.

.SH OPTIONS
.IP "\fBPackageName\fR"
Name of the package to build. This will be used in the spec file for the name
tag as well as to derive the appropriate file names.

.IP "\fBVersion\fR"
The version of the release you are going to build.

.IP "\fB-a\fR"
Used to override the default author of the software you are going to package.
The default author is configured inside the pkgmake shell script itself and
may be modified there as well. The syntax to use is:
\fBname <email@address>\fR

.IP "\fB-b\fR"
Target BuildArchitecture. Something like \fBi386\fR, \fBathlon\fR, or \fBnoarch\fR.

.IP "\fB-c\fR"
A file holding the changelog of the software. The content must conform to the
RPM specifications, i.e. the latest entry must be on top (and the oldest at the
end) of the file. For the line syntax, refer to the sample entry generated by
this script.

.IP "\fB-conf\fR"
A space separated list of files from the package which should be treated as
configuration files (i.e. don't overwrite on install but create a copy, don't
remove on deletion except if --purge is specified). You must enclose this list
with single quotes, and escape all forward slashes (i.e. "/") by a backslash
(i.e. "\\").
An example: \fB-conf '\\/some\\/file \\/another\\/file'\fR

.IP "\fB-d\fR"
Directory to use for a work copy. If used, this directory (and all its content)
will be copied to the Buildroot and handled there. If not used, the files to use
are expected in the Buildroot as a sub directory with the name <PackageName>-<Version>

.IP "\fB-deb\fR"
Make *.deb (even if config says MKDEB=0)

.IP "\fB-debopt\fR"
Option(s) to pass to debbuild.

.IP "\fB-descfile\fR"
A file holding the long description for the package. If not given, the summary will
be used instead.

.IP "\fB-g\fR"
The software group your package belongs to. An examples would be
\fB"Applications\\/Internet"\fR. Again, escape all forward slashes with a
backslash.

.IP "\fB-l\fR"
License of the software. Should be GPL :)

.IP "\fB-keepdspec\fR"
Don't remove the .dspec file after processing (see \fB-section\fR below for details)

.IP "\fB-nodeb\fR"
Don't make *.deb (even if config says MKDEB=1)

.IP "\fB-nochangelogsort\fR"
By default, pkgmake takes care that the changelog has its entries in the right
order. However, if you have problems with this, you can temporarily switch off
changelog sorting with this switch.

.IP "\fB-nonukecvs\fR"
Don't nuke the CVS/* and .svn/* files from the source (copy). Not very useful -
but hey, you never know who wants to distribute the CVS/SVN information along!

.IP "\fB-norpm\fR"
Don't make *.rpm (even if config says MKRPM=1)

.IP "\fB-nosdeb\fR"
Don't create Debian sourcce package (*.sdeb). Since these source packages only
make sense to people using debbuild, they should normally \fInot\fR be build. The only
reason could be for you to store the source tarball together with the Spec file
in one archive.

.IP "\fB-nosrpm\fR"
Don't create RPM source package (*.src.rpm)

.IP "\fB-notar\fR"
Don't create tarball from the sources. This means, that the source tarball
already exists in the SOURCES/ directory with the correct naming conventions.
Even if you specify a directory with -d, that will be ignored in this case.

.IP "\fB-p\fR"
The packager - you, if you build the package. Same rules as with \fB-a\fR

.IP "\fB-prov\fR"
What the package provides. This could be either the names of the main executables,
or the meta-name (e.g. httpd if you build Apache) used for the "requires" of
other packages.

.IP "\fB-r\fR"
The release tag for this package.

.IP "\fB-req\fR"
What other packages this package depends on. Same rules as with \fB-prov\fR

.IP "\fB-rpm\fR"
Make *.rpm (even if config says MKRPM=0)

.IP "\fB-rpmopt\fR"
Option(s) to pass to rpmbuild. Enclose the options in quotes, e.g. \fB-rpmopt "--clean"\fR.
See the \fBRPMOPTS\fR configuration option in \fIman pkgmake.conf\fR for more
details.

.IP "\fB-q\fR"
Tell the sub-processes to be quiet. You can use this option up to 2 times on
one call (starting from the 3rd time, it will simply be ignored): One -q
suppresses the load of STDOUT from the build process. The second -q
additionally suppresses its still talkative STDERR.

.IP "\fB-Q\fR"
Be Quiet ourselves: Don't issue any output on STDOUT ourselves (doesn't apply
to the sub-processes - see \fB-q\fR for them).

.IP "\fB-s\fR"
Give a short summary what your package is about. Enclose in quotes, escape all
forward slashes with backslashes again.

.IP "\fB-sdeb\fR"
Create Debian source package. See \fB-nosdeb\fR above for details.

.IP "\fB-section\fR"
Usually, .spec files are generated for rpmbuild - and thus should apply to the
RPM specifications. RPM classifies software by groups, which are unfortunately
not the same as the sections used by Debian. If your Software e.g. belongs to
the group "Development/Tools", the corresponding section for Debian most likely
would be "devel" - while "Applications/Databases" has no corresponding section
and probably goes to "misc".

It is obvious that these sections would cause problems when bound into a RPM
package, even if rpmbuild will build it. So this leaves us with two choices:
Either break RPM - or have a separate spec file for debbuild. If you are
\fBnot\fR going to build any RPM packages, you can stay with the \fB-g\fR switch
instead. If you are building RPM packages only - this question doesn't come up.
But if you want to build \fBboth\fR RPM and DEB at the same time, this is for
you: The \fB-section\fR switch tells pkgmake to build a separate .dspec file
with the given section and hands this to debbuild, while rpmbuild will be given
the correct .spec file. The only difference between the .spec and the .dspec
files created is the value for the "Group:" statement.

.IP "\fB-speconly\fR"
Only create the *.spec file - don't run the package build process.

.IP "\fB-srpm\fR"
Create RPM source package (*.src.rpm)

.IP "\fB-t\fR"
Template file to use for the *.spec file. This file must be in the SPEC/
directory of your Build environment. If your directory tree is already arranged
the same way as the installation would be, you can use the alldirs.tpl (so all
files and directories will be included as-is). But if your software uses the
classical configure, make, make install - you should rather use the make.tpl
as a template, copy it to <package>.tpl and edit the file list manually
(examples are given inside make.tpl - or read the rpmbuild howtos for more
details).

.IP "\fB-u\fR"
Specify a vendor URL. Again, forward slashes have to be escaped with
backslashes, e.g. \fB-u "http:\\/\\/www.domain.com\\/"\fR

.SH "EXAMPLES"
Here are some examples of calling pkgmake from the command line. How many (and
which) command line parameters you will need, depends on several conditions:
.IP - 3
how close the settings in your configuration file match the project
.IP - 3
whether your sources already reside in the build directory
.IP - 3
which replacement variables you used in your template file (and thus may need to
pass the values on the command line)
.PP
To just mention some of them. So here we go with some examples:

Build a *.deb for dummy v0.1.1, files are already in the build directory, and
all replacement variables used in the template files get matched by your
configuration:
.IP "" 3
pkgmake dummy 0.1.1
.PP
The same, but source is located in /usr/local/src/dummy and you need to pass
the summary:
.IP "" 3
pkgmake dummy 0.1.1 -d /usr/local/dummy -s 'This is a dummy package'
.PP
Like the first case, but you need to specify a group - and want to investigate
the .spec file first (so pkgmake shall not call debbuild / rpmbuild):
.IP "" 3
pkgmake dummy 0.1.1 -g 'Amusements\\/Graphics' -speconly
.PP
The same, but as we want to build for Debian, we need to specify the
corresponding section (since we build nothing, there will be no messed-up .rpm
file as a side-effect):
.IP "" 3
pkgmake dummy 0.1.1 -g 'graphics' -speconly
.PP
This time you want to specify the "Requires:" on the command line, and only
build the .deb package (no .rpm - e.g. since that would have different
requirements):
.IP "" 3
pkgmake dummy 0.1.1 -req 'httpd phpapi' -norpm
.PP
Now we want to read the description (the long one) from a file, and build a
package for the i386 architecture:
.IP "" 3
pkgmake dummy 0.1.1 -descfile ${BUILDDEB}/SPEC/dummy.desc -b i386
.PP
Of course, almost all combinations of command line parameters can be used. Some
combinations do not make sense - and in those cases the results may be weired:
You should still use your brains when combining them :) So however, here comes
a long variant for you to think over:
.IP "" 3
pkgmake dummy 0.1.1 -req 'httpd phpapi' -notar -conf '/etc/dummy.conf' -deb -norpm -debopt "\\-\\-define\\ \\'REDHAT\\ 0\\'" -nonukecvs -r johnny4 -q
.PP
To compare your results, here comes what it means: Create the Debian (-deb)
package dummy_0.1.1-johnny4.deb which depends on the packages httpd and phpapi.
Do not create a tarball from the sources (we already have dummy-0.1.1.tar.gz in
the SOURCES/ directory). Mark the file /etc/dummy.conf a configuration file (so
the user installing this package gets asked whether to overwrite an existing
file). Do not remove any CVS/* or .svn/* files (-nonukecvs) that may exist in
the source (tarball). Pass the command line option "--define 'REDHAT 0'" to
debbuild, and suppress any messages debbuild sends to STDOUT (-q) - we only want
to see eventual errors. Do not make a RPM package (-norpm). Ough.

.SH "CONFIGURATION"
Configuration can be done in ~/.pkgmake/pkgmake.conf and/or
/etc/pkgmake/pkgmake.conf - which is also the order of preference: pkgmake
first takes presets (hardcoded configuration inside the script itself), and
then looks for /etc/pkgmake/pkgmake,conf - if found, presets are overwritten
with the values defined here. Then it looks for the ~/.pkgmake/pkgmake.conf and
uses the values of this file (if found) to overwrite the default settings. This
means, you only need to define values different from the defaults in the system
wide config (/etc/pkgmake/pkgmake.conf) to use for all users of the system, and
each user then also only needs to re-define values different from the system
wide ones in his private configuration.

.SH "FILES"
/usr/bin/pkgmake

/etc/pkgmake/pkgmake.conf

~/.pkgmake/pkgmake.conf

/usr/src/rpm/SPEC/alldirs.tpl

/usr/src/rpm/SPEC/make.tpl

.SH "SEE ALSO"
pkgmake.conf(5)

pkgmake.tpl(5)

.SH "AUTHOR" 
.PP 
This manual page was written by Andreas Itzchak Rehberg (devel@izzysoft.de),
the author of the program. Permission is granted to copy, distribute and/or
modify this document under the terms of the GNU General Public License,
Version 2.

More information may be found on the authors website, http://www.izzysoft.de/
 
